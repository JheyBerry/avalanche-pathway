"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminAPI = void 0;
const jrpcapi_1 = require("../../common/jrpcapi");
/**
 * Class for interacting with a node's AdminAPI.
 *
 * @category RPCAPIs
 *
 * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.
 * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.
 */
class AdminAPI extends jrpcapi_1.JRPCAPI {
    /**
       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]
       * method.
       *
       * @param core A reference to the Avalanche class
       * @param baseurl Defaults to the string "/ext/admin" as the path to rpc's baseurl
       */
    constructor(core, baseurl = '/ext/admin') {
        super(core, baseurl);
        /**
           * Assign an API an alias, a different endpoint for the API. The original endpoint will still
           * work. This change only affects this node; other nodes will not know about this alias.
           *
           * @param endpoint The original endpoint of the API. endpoint should only include the part of
           * the endpoint after /ext/
           * @param alias The API being aliased can now be called at ext/alias
           *
           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.
           */
        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                endpoint,
                alias,
            };
            return this.callMethod('admin.alias', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Give a blockchain an alias, a different name that can be used any place the blockchain’s
           * ID is used.
           *
           * @param endpoint The blockchain’s ID
           * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)
           *
           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.
           */
        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                chain,
                alias,
            };
            return this.callMethod('admin.aliasChain', params)
                .then((response) => response.data.result.success);
        });
        /**
         * Get all aliases for given blockchain
         *
         * @param chain The blockchain’s ID
         *
         * @returns Returns a Promise<string[]> containing aliases of the blockchain.
         */
        this.getChainAliases = (chain) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                chain,
            };
            return this.callMethod('admin.getChainAliases', params)
                .then((response) => response.data.result.aliases);
        });
        /**
           * Dump the mutex statistics of the node to the specified file.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('admin.lockProfile', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Dump the current memory footprint of the node to the specified file.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('admin.memoryProfile', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Start profiling the cpu utilization of the node. Will dump the profile information into
           * the specified file on stop.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('admin.startCPUProfiler', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Stop the CPU profile that was previously started.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {
            return this.callMethod('admin.stopCPUProfiler')
                .then((response) => response.data.result.success);
        });
    }
}
exports.AdminAPI = AdminAPI;
//# sourceMappingURL=data:application/json;base64,