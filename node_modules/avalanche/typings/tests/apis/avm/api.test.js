"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("src");
const api_1 = require("src/apis/avm/api");
const keychain_1 = require("src/apis/avm/keychain");
const buffer_1 = require("buffer/");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const utxos_1 = require("src/apis/avm/utxos");
const inputs_1 = require("src/apis/avm/inputs");
const create_hash_1 = __importDefault(require("create-hash"));
const tx_1 = require("src/apis/avm/tx");
const constants_1 = require("src/apis/avm/constants");
const outputs_1 = require("src/apis/avm/outputs");
const ops_1 = require("src/apis/avm/ops");
const bech32 = __importStar(require("bech32"));
const payload_1 = require("src/utils/payload");
const initialstates_1 = require("src/apis/avm/initialstates");
const constants_2 = require("src/utils/constants");
const helperfunctions_1 = require("src/utils/helperfunctions");
const output_1 = require("src/common/output");
const minterset_1 = require("src/apis/avm/minterset");
const constants_3 = require("src/utils/constants");
const persistenceoptions_1 = require("src/utils/persistenceoptions");
const constants_4 = require("src/utils/constants");
const serialization_1 = require("src/utils/serialization");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
const serializer = serialization_1.Serialization.getInstance();
const dumpSerailization = false;
function serialzeit(aThing, name) {
    if (dumpSerailization) {
        console.log(JSON.stringify(serializer.serialize(aThing, "avm", "hex", name + " -- Hex Encoded")));
        console.log(JSON.stringify(serializer.serialize(aThing, "avm", "display", name + " -- Human-Readable")));
    }
}
describe('AVMAPI', () => {
    const networkid = 12345;
    const blockchainid = constants_2.Defaults.network[networkid].X.blockchainID;
    const ip = '127.0.0.1';
    const port = 9650;
    const protocol = 'https';
    const username = 'AvaLabs';
    const password = 'password';
    const avalanche = new src_1.Avalanche(ip, port, protocol, networkid, undefined, undefined, undefined, true);
    let api;
    let alias;
    const addrA = 'X-' + bech32.encode(avalanche.getHRP(), bech32.toWords(bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW")));
    const addrB = 'X-' + bech32.encode(avalanche.getHRP(), bech32.toWords(bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF")));
    const addrC = 'X-' + bech32.encode(avalanche.getHRP(), bech32.toWords(bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")));
    beforeAll(() => {
        api = new api_1.AVMAPI(avalanche, '/ext/bc/X', blockchainid);
        alias = api.getBlockchainAlias();
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test('can Send 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const txId = 'asdfhvl234';
        const memo = "hello world";
        const changeAddr = "X-local1";
        const result = api.send(username, password, 'assetId', 10, addrA, [addrB], addrA, memo);
        const payload = {
            result: {
                txID: txId,
                changeAddr: changeAddr
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response['txID']).toBe(txId);
        expect(response['changeAddr']).toBe(changeAddr);
    }));
    test('can Send 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const txId = 'asdfhvl234';
        const memo = buffer_1.Buffer.from("hello world");
        const changeAddr = "X-local1";
        const result = api.send(username, password, bintools.b58ToBuffer('6h2s5de1VC65meajE1L2PjvZ1MXvHc3F6eqPCGKuDt4MxiweF'), new bn_js_1.default(10), addrA, [addrB], addrA, memo);
        const payload = {
            result: {
                txID: txId,
                changeAddr: changeAddr
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response['txID']).toBe(txId);
        expect(response['changeAddr']).toBe(changeAddr);
    }));
    test('can Send Multiple', () => __awaiter(void 0, void 0, void 0, function* () {
        const txId = 'asdfhvl234';
        const memo = "hello world";
        const changeAddr = "X-local1";
        const result = api.sendMultiple(username, password, [{ assetID: 'assetId', amount: 10, to: addrA }], [addrB], addrA, memo);
        const payload = {
            result: {
                txID: txId,
                changeAddr: changeAddr
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response['txID']).toBe(txId);
        expect(response['changeAddr']).toBe(changeAddr);
    }));
    test('refreshBlockchainID', () => __awaiter(void 0, void 0, void 0, function* () {
        let n3bcID = constants_2.Defaults.network[3].X["blockchainID"];
        let n12345bcID = constants_2.Defaults.network[12345].X["blockchainID"];
        let testAPI = new api_1.AVMAPI(avalanche, '/ext/bc/avm', n3bcID);
        let bc1 = testAPI.getBlockchainID();
        expect(bc1).toBe(n3bcID);
        testAPI.refreshBlockchainID();
        let bc2 = testAPI.getBlockchainID();
        expect(bc2).toBe(n12345bcID);
        testAPI.refreshBlockchainID(n3bcID);
        let bc3 = testAPI.getBlockchainID();
        expect(bc3).toBe(n3bcID);
    }));
    test('listAddresses', () => __awaiter(void 0, void 0, void 0, function* () {
        const addresses = [addrA, addrB];
        const result = api.listAddresses(username, password);
        const payload = {
            result: {
                addresses,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(addresses);
    }));
    test('importKey', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = addrC;
        const result = api.importKey(username, password, 'key');
        const payload = {
            result: {
                address,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(address);
    }));
    test('getBalance', () => __awaiter(void 0, void 0, void 0, function* () {
        const balance = new bn_js_1.default('100', 10);
        const respobj = {
            balance,
            utxoIDs: [
                {
                    "txID": "LUriB3W919F84LwPMMw4sm2fZ4Y76Wgb6msaauEY7i1tFNmtv",
                    "outputIndex": 0
                }
            ]
        };
        const result = api.getBalance(addrA, 'ATH');
        const payload = {
            result: respobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(respobj));
    }));
    test('exportKey', () => __awaiter(void 0, void 0, void 0, function* () {
        const key = 'sdfglvlj2h3v45';
        const result = api.exportKey(username, password, addrA);
        const payload = {
            result: {
                privateKey: key,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(key);
    }));
    test("export", () => __awaiter(void 0, void 0, void 0, function* () {
        let amount = new bn_js_1.default(100);
        let to = "abcdef";
        let assetID = "AVAX";
        let username = "Robert";
        let password = "Paulson";
        let txID = "valid";
        let result = api.export(username, password, to, amount, assetID);
        let payload = {
            "result": {
                "txID": txID
            }
        };
        let responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test("exportAVAX", () => __awaiter(void 0, void 0, void 0, function* () {
        let amount = new bn_js_1.default(100);
        let to = "abcdef";
        let username = "Robert";
        let password = "Paulson";
        let txID = "valid";
        let result = api.exportAVAX(username, password, to, amount);
        let payload = {
            "result": {
                "txID": txID
            }
        };
        let responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test("import", () => __awaiter(void 0, void 0, void 0, function* () {
        let to = "abcdef";
        let username = "Robert";
        let password = "Paulson";
        let txID = "valid";
        let result = api.import(username, password, to, blockchainid);
        let payload = {
            "result": {
                "txID": txID
            }
        };
        let responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test("importAVAX", () => __awaiter(void 0, void 0, void 0, function* () {
        let to = "abcdef";
        let username = "Robert";
        let password = "Paulson";
        let txID = "valid";
        let result = api.importAVAX(username, password, to, blockchainid);
        let payload = {
            "result": {
                "txID": txID
            }
        };
        let responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test('createAddress', () => __awaiter(void 0, void 0, void 0, function* () {
        const alias = 'randomalias';
        const result = api.createAddress(username, password);
        const payload = {
            result: {
                address: alias,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(alias);
    }));
    test('createFixedCapAsset', () => __awaiter(void 0, void 0, void 0, function* () {
        const kp = new keychain_1.KeyPair(avalanche.getHRP(), alias);
        kp.importKey(buffer_1.Buffer.from('ef9bf2d4436491c153967c9709dd8e82795bdb9b5ad44ee22c2903005d1cf676', 'hex'));
        const denomination = 0;
        const assetid = '8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533';
        const initialHolders = [
            {
                address: '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh',
                amount: '10000',
            },
            {
                address: '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh',
                amount: '50000',
            },
        ];
        const result = api.createFixedCapAsset(username, password, 'Some Coin', 'SCC', denomination, initialHolders);
        const payload = {
            result: {
                assetID: assetid,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(assetid);
    }));
    test('createVariableCapAsset', () => __awaiter(void 0, void 0, void 0, function* () {
        const kp = new keychain_1.KeyPair(avalanche.getHRP(), alias);
        kp.importKey(buffer_1.Buffer.from('ef9bf2d4436491c153967c9709dd8e82795bdb9b5ad44ee22c2903005d1cf676', 'hex'));
        const denomination = 0;
        const assetid = '8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533';
        const minterSets = [
            {
                minters: [
                    '4peJsFvhdn7XjhNF4HWAQy6YaJts27s9q',
                ],
                threshold: 1,
            },
            {
                minters: [
                    'dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF',
                    '2fE6iibqfERz5wenXE6qyvinsxDvFhHZk',
                    '7ieAJbfrGQbpNZRAQEpZCC1Gs1z5gz4HU',
                ],
                threshold: 2,
            },
        ];
        const result = api.createVariableCapAsset(username, password, 'Some Coin', 'SCC', denomination, minterSets);
        const payload = {
            result: {
                assetID: assetid,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(assetid);
    }));
    test('mint 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const username = 'Collin';
        const password = 'Cusce';
        const amount = 2;
        const assetID = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
        const to = 'dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF';
        const minters = [
            'dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF',
            '2fE6iibqfERz5wenXE6qyvinsxDvFhHZk',
            '7ieAJbfrGQbpNZRAQEpZCC1Gs1z5gz4HU',
        ];
        const result = api.mint(username, password, amount, assetID, to, minters);
        const payload = {
            result: {
                txID: 'sometx',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('sometx');
    }));
    test('mint 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const username = 'Collin';
        const password = 'Cusce';
        const amount = new bn_js_1.default(1);
        const assetID = buffer_1.Buffer.from('f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7', 'hex');
        const to = 'dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF';
        const minters = [
            'dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF',
            '2fE6iibqfERz5wenXE6qyvinsxDvFhHZk',
            '7ieAJbfrGQbpNZRAQEpZCC1Gs1z5gz4HU',
        ];
        const result = api.mint(username, password, amount, assetID, to, minters);
        const payload = {
            result: {
                txID: 'sometx',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('sometx');
    }));
    test('getTx', () => __awaiter(void 0, void 0, void 0, function* () {
        const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
        const result = api.getTx(txid);
        const payload = {
            result: {
                tx: 'sometx',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('sometx');
    }));
    test('getTxStatus', () => __awaiter(void 0, void 0, void 0, function* () {
        const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
        const result = api.getTxStatus(txid);
        const payload = {
            result: {
                status: 'accepted',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('accepted');
    }));
    test('getAssetDescription as string', () => __awaiter(void 0, void 0, void 0, function* () {
        const assetid = buffer_1.Buffer.from('8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533', 'hex');
        const assetidstr = bintools.cb58Encode(assetid);
        const result = api.getAssetDescription(assetidstr);
        const payload = {
            result: {
                name: 'Collin Coin',
                symbol: 'CKC',
                assetID: assetidstr,
                denomination: '10',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.name).toBe('Collin Coin');
        expect(response.symbol).toBe('CKC');
        expect(response.assetID.toString('hex')).toBe(assetid.toString('hex'));
        expect(response.denomination).toBe(10);
    }));
    test('getAssetDescription as Buffer', () => __awaiter(void 0, void 0, void 0, function* () {
        const assetid = buffer_1.Buffer.from('8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533', 'hex');
        const assetidstr = bintools.cb58Encode(buffer_1.Buffer.from('8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533', 'hex'));
        const result = api.getAssetDescription(assetid);
        const payload = {
            result: {
                name: 'Collin Coin',
                symbol: 'CKC',
                assetID: assetidstr,
                denomination: '11',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.name).toBe('Collin Coin');
        expect(response.symbol).toBe('CKC');
        expect(response.assetID.toString('hex')).toBe(assetid.toString('hex'));
        expect(response.denomination).toBe(11);
    }));
    test('getUTXOs', () => __awaiter(void 0, void 0, void 0, function* () {
        // Payment
        const OPUTXOstr1 = bintools.cb58Encode(buffer_1.Buffer.from('000038d1b9f1138672da6fb6c35125539276a9acc2a668d63bea6ba3c795e2edb0f5000000013e07e38e2f23121be8756412c18db7246a16d26ee9936f3cba28be149cfd3558000000070000000000004dd500000000000000000000000100000001a36fd0c2dbcab311731dde7ef1514bd26fcdc74d', 'hex'));
        const OPUTXOstr2 = bintools.cb58Encode(buffer_1.Buffer.from('0000c3e4823571587fe2bdfc502689f5a8238b9d0ea7f3277124d16af9de0d2d9911000000003e07e38e2f23121be8756412c18db7246a16d26ee9936f3cba28be149cfd355800000007000000000000001900000000000000000000000100000001e1b6b6a4bad94d2e3f20730379b9bcd6f176318e', 'hex'));
        const OPUTXOstr3 = bintools.cb58Encode(buffer_1.Buffer.from('0000f29dba61fda8d57a911e7f8810f935bde810d3f8d495404685bdb8d9d8545e86000000003e07e38e2f23121be8756412c18db7246a16d26ee9936f3cba28be149cfd355800000007000000000000001900000000000000000000000100000001e1b6b6a4bad94d2e3f20730379b9bcd6f176318e', 'hex'));
        const set = new utxos_1.UTXOSet();
        set.add(OPUTXOstr1);
        set.addArray([OPUTXOstr2, OPUTXOstr3]);
        const persistOpts = new persistenceoptions_1.PersistanceOptions('test', true, 'union');
        expect(persistOpts.getMergeRule()).toBe('union');
        let addresses = set.getAddresses().map((a) => api.addressFromBuffer(a));
        let result = api.getUTXOs(addresses, api.getBlockchainID(), 0, undefined, persistOpts);
        const payload = {
            result: {
                numFetched: 3,
                utxos: [OPUTXOstr1, OPUTXOstr2, OPUTXOstr3],
                stopIndex: { address: "a", utxo: "b" }
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = (yield result).utxos;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response.getAllUTXOStrings().sort())).toBe(JSON.stringify(set.getAllUTXOStrings().sort()));
        addresses = set.getAddresses().map((a) => api.addressFromBuffer(a));
        result = api.getUTXOs(addresses, api.getBlockchainID(), 0, undefined, persistOpts);
        jest_mock_axios_1.default.mockResponse(responseObj);
        response = (yield result).utxos;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(2);
        expect(JSON.stringify(response.getAllUTXOStrings().sort())).toBe(JSON.stringify(set.getAllUTXOStrings().sort()));
    }));
    describe('Transactions', () => {
        let set;
        let keymgr2;
        let keymgr3;
        let addrs1;
        let addrs2;
        let addrs3;
        let addressbuffs = [];
        let addresses = [];
        let utxos;
        let inputs;
        let outputs;
        let ops;
        const amnt = 10000;
        const assetID = buffer_1.Buffer.from(create_hash_1.default('sha256').update('mary had a little lamb').digest());
        const NFTassetID = buffer_1.Buffer.from(create_hash_1.default('sha256').update("I can't stand it, I know you planned it, I'mma set straight this Watergate.'").digest());
        let secpbase1;
        let secpbase2;
        let secpbase3;
        let initialState;
        let nftpbase1;
        let nftpbase2;
        let nftpbase3;
        let nftInitialState;
        let nftutxoids = [];
        let fungutxoids = [];
        let avm;
        const fee = 10;
        const name = 'Mortycoin is the dumb as a sack of hammers.';
        const symbol = 'morT';
        const denomination = 8;
        let secpMintOut1;
        let secpMintOut2;
        let secpMintTXID;
        let secpMintUTXO;
        let secpMintXferOut1;
        let secpMintXferOut2;
        let secpMintOp;
        let xfersecpmintop;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            avm = new api_1.AVMAPI(avalanche, "/ext/bc/X", blockchainid);
            const result = avm.getAVAXAssetID(true);
            const payload = {
                result: {
                    name,
                    symbol,
                    assetID: bintools.cb58Encode(assetID),
                    denomination: `${denomination}`,
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            yield result;
            set = new utxos_1.UTXOSet();
            avm.newKeyChain();
            keymgr2 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
            keymgr3 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
            addrs1 = [];
            addrs2 = [];
            addrs3 = [];
            utxos = [];
            inputs = [];
            outputs = [];
            ops = [];
            nftutxoids = [];
            fungutxoids = [];
            const pload = buffer_1.Buffer.alloc(1024);
            pload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, 'utf8');
            for (let i = 0; i < 3; i++) {
                addrs1.push(avm.addressFromBuffer(avm.keyChain().makeKey().getAddress()));
                addrs2.push(avm.addressFromBuffer(keymgr2.makeKey().getAddress()));
                addrs3.push(avm.addressFromBuffer(keymgr3.makeKey().getAddress()));
            }
            const amount = constants_4.ONEAVAX.mul(new bn_js_1.default(amnt));
            addressbuffs = avm.keyChain().getAddresses();
            addresses = addressbuffs.map((a) => avm.addressFromBuffer(a));
            const locktime = new bn_js_1.default(54321);
            const threshold = 3;
            for (let i = 0; i < 5; i++) {
                let txid = buffer_1.Buffer.from(create_hash_1.default('sha256').update(bintools.fromBNToBuffer(new bn_js_1.default(i), 32)).digest());
                let txidx = buffer_1.Buffer.alloc(4);
                txidx.writeUInt32BE(i, 0);
                const out = new outputs_1.SECPTransferOutput(amount, addressbuffs, locktime, threshold);
                const xferout = new outputs_1.TransferableOutput(assetID, out);
                outputs.push(xferout);
                const u = new utxos_1.UTXO();
                u.fromBuffer(buffer_1.Buffer.concat([u.getCodecIDBuffer(), txid, txidx, xferout.toBuffer()]));
                fungutxoids.push(u.getUTXOID());
                utxos.push(u);
                txid = u.getTxID();
                txidx = u.getOutputIdx();
                const asset = u.getAssetID();
                const input = new inputs_1.SECPTransferInput(amount);
                const xferinput = new inputs_1.TransferableInput(txid, txidx, asset, input);
                inputs.push(xferinput);
                const nout = new outputs_1.NFTTransferOutput(1000 + i, pload, addressbuffs, locktime, threshold);
                const op = new ops_1.NFTTransferOperation(nout);
                const nfttxid = buffer_1.Buffer.from(create_hash_1.default('sha256').update(bintools.fromBNToBuffer(new bn_js_1.default(1000 + i), 32)).digest());
                const nftutxo = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, nfttxid, 1000 + i, NFTassetID, nout);
                nftutxoids.push(nftutxo.getUTXOID());
                const xferop = new ops_1.TransferableOperation(NFTassetID, [nftutxo.getUTXOID()], op);
                ops.push(xferop);
                utxos.push(nftutxo);
            }
            set.addArray(utxos);
            secpbase1 = new outputs_1.SECPTransferOutput(new bn_js_1.default(777), addrs3.map((a) => avm.parseAddress(a)), helperfunctions_1.UnixNow(), 1);
            secpbase2 = new outputs_1.SECPTransferOutput(new bn_js_1.default(888), addrs2.map((a) => avm.parseAddress(a)), helperfunctions_1.UnixNow(), 1);
            secpbase3 = new outputs_1.SECPTransferOutput(new bn_js_1.default(999), addrs2.map((a) => avm.parseAddress(a)), helperfunctions_1.UnixNow(), 1);
            initialState = new initialstates_1.InitialStates();
            initialState.addOutput(secpbase1, constants_1.AVMConstants.SECPFXID);
            initialState.addOutput(secpbase2, constants_1.AVMConstants.SECPFXID);
            initialState.addOutput(secpbase3, constants_1.AVMConstants.SECPFXID);
            nftpbase1 = new outputs_1.NFTMintOutput(0, addrs1.map(a => api.parseAddress(a)), locktime, 1);
            nftpbase2 = new outputs_1.NFTMintOutput(1, addrs2.map(a => api.parseAddress(a)), locktime, 1);
            nftpbase3 = new outputs_1.NFTMintOutput(2, addrs3.map(a => api.parseAddress(a)), locktime, 1);
            nftInitialState = new initialstates_1.InitialStates();
            nftInitialState.addOutput(nftpbase1, constants_1.AVMConstants.NFTFXID);
            nftInitialState.addOutput(nftpbase2, constants_1.AVMConstants.NFTFXID);
            nftInitialState.addOutput(nftpbase3, constants_1.AVMConstants.NFTFXID);
            secpMintOut1 = new outputs_1.SECPMintOutput(addressbuffs, new bn_js_1.default(0), 1);
            secpMintOut2 = new outputs_1.SECPMintOutput(addressbuffs, new bn_js_1.default(0), 1);
            secpMintTXID = buffer_1.Buffer.from(create_hash_1.default('sha256').update(bintools.fromBNToBuffer(new bn_js_1.default(1337), 32)).digest());
            secpMintUTXO = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, secpMintTXID, 0, assetID, secpMintOut1);
            secpMintXferOut1 = new outputs_1.SECPTransferOutput(new bn_js_1.default(123), addrs3.map((a) => avm.parseAddress(a)), helperfunctions_1.UnixNow(), 2);
            secpMintXferOut2 = new outputs_1.SECPTransferOutput(new bn_js_1.default(456), [avm.parseAddress(addrs2[0])], helperfunctions_1.UnixNow(), 1);
            secpMintOp = new ops_1.SECPMintOperation(secpMintOut1, secpMintXferOut1);
            set.add(secpMintUTXO);
            xfersecpmintop = new ops_1.TransferableOperation(assetID, [secpMintUTXO.getUTXOID()], secpMintOp);
        }));
        test('signTx', () => __awaiter(void 0, void 0, void 0, function* () {
            const txu1 = yield avm.buildBaseTx(set, new bn_js_1.default(amnt), bintools.cb58Encode(assetID), addrs3, addrs1, addrs1);
            const txu2 = set.buildBaseTx(networkid, bintools.cb58Decode(blockchainid), new bn_js_1.default(amnt), assetID, addrs3.map((a) => avm.parseAddress(a)), addrs1.map((a) => avm.parseAddress(a)), addrs1.map((a) => avm.parseAddress(a)), avm.getTxFee(), assetID, undefined, helperfunctions_1.UnixNow(), new bn_js_1.default(0), 1);
            const tx1 = avm.signTx(txu1);
            const tx2 = avm.signTx(txu2);
            expect(tx2.toBuffer().toString('hex')).toBe(tx1.toBuffer().toString('hex'));
            expect(tx2.toString()).toBe(tx1.toString());
        }));
        test('buildBaseTx1', () => __awaiter(void 0, void 0, void 0, function* () {
            const txu1 = yield avm.buildBaseTx(set, new bn_js_1.default(amnt), bintools.cb58Encode(assetID), addrs3, addrs1, addrs1, new payload_1.UTF8Payload("hello world").getContent());
            let memobuf = buffer_1.Buffer.from("hello world");
            const txu2 = set.buildBaseTx(networkid, bintools.cb58Decode(blockchainid), new bn_js_1.default(amnt), assetID, addrs3.map((a) => avm.parseAddress(a)), addrs1.map((a) => avm.parseAddress(a)), addrs1.map((a) => avm.parseAddress(a)), avm.getTxFee(), assetID, memobuf, helperfunctions_1.UnixNow(), new bn_js_1.default(0), 1);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
        }));
        test('buildBaseTx2', () => __awaiter(void 0, void 0, void 0, function* () {
            const txu1 = yield avm.buildBaseTx(set, new bn_js_1.default(amnt).sub(new bn_js_1.default(100)), bintools.cb58Encode(assetID), addrs3, addrs1, addrs2, new payload_1.UTF8Payload("hello world"));
            const txu2 = set.buildBaseTx(networkid, bintools.cb58Decode(blockchainid), new bn_js_1.default(amnt).sub(new bn_js_1.default(100)), assetID, addrs3.map((a) => avm.parseAddress(a)), addrs1.map((a) => avm.parseAddress(a)), addrs2.map((a) => avm.parseAddress(a)), avm.getTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow(), new bn_js_1.default(0), 1);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            const outies = txu1.getTransaction().getOuts().sort(outputs_1.TransferableOutput.comparator());
            expect(outies.length).toBe(2);
            const outaddr0 = outies[0].getOutput().getAddresses().map((a) => avm.addressFromBuffer(a));
            const outaddr1 = outies[1].getOutput().getAddresses().map((a) => avm.addressFromBuffer(a));
            const testaddr2 = JSON.stringify(addrs2.sort());
            const testaddr3 = JSON.stringify(addrs3.sort());
            const testout0 = JSON.stringify(outaddr0.sort());
            const testout1 = JSON.stringify(outaddr1.sort());
            expect((testaddr2 == testout0 && testaddr3 == testout1)
                || (testaddr3 == testout0 && testaddr2 == testout1)).toBe(true);
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "BaseTx");
        }));
        test('issueTx Serialized', () => __awaiter(void 0, void 0, void 0, function* () {
            const txu = yield avm.buildBaseTx(set, new bn_js_1.default(amnt), bintools.cb58Encode(assetID), addrs3, addrs1, addrs1);
            const tx = avm.signTx(txu);
            const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
            const result = avm.issueTx(tx.toString());
            const payload = {
                result: {
                    txID: txid,
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            let response = yield result;
            expect(response).toBe(txid);
        }));
        test('issueTx Buffer', () => __awaiter(void 0, void 0, void 0, function* () {
            const txu = yield avm.buildBaseTx(set, new bn_js_1.default(amnt), bintools.cb58Encode(assetID), addrs3, addrs1, addrs1);
            const tx = avm.signTx(txu);
            const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
            const result = avm.issueTx(tx.toBuffer());
            const payload = {
                result: {
                    txID: txid,
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            const response = yield result;
            expect(response).toBe(txid);
        }));
        test('issueTx Class Tx', () => __awaiter(void 0, void 0, void 0, function* () {
            const txu = yield avm.buildBaseTx(set, new bn_js_1.default(amnt), bintools.cb58Encode(assetID), addrs3, addrs1, addrs1);
            const tx = avm.signTx(txu);
            const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
            const result = avm.issueTx(tx);
            const payload = {
                result: {
                    txID: txid,
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            const response = yield result;
            expect(response).toBe(txid);
        }));
        test('buildCreateAssetTx - Fixed Cap', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setCreationTxFee(new bn_js_1.default(fee));
            const txu1 = yield avm.buildCreateAssetTx(set, addrs1, addrs2, initialState, name, symbol, denomination);
            const txu2 = set.buildCreateAssetTx(avalanche.getNetworkID(), bintools.cb58Decode(avm.getBlockchainID()), addrs1.map((a) => avm.parseAddress(a)), addrs2.map((a) => avm.parseAddress(a)), initialState, name, symbol, denomination, undefined, avm.getCreationTxFee(), assetID);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "CreateAssetTx");
        }));
        test('buildCreateAssetTx - Variable Cap', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setCreationTxFee(new bn_js_1.default(constants_2.Defaults.network[12345].P["creationTxFee"]));
            let mintOutputs = [secpMintOut1, secpMintOut2];
            const txu1 = yield avm.buildCreateAssetTx(set, addrs1, addrs2, initialState, name, symbol, denomination, mintOutputs);
            const txu2 = set.buildCreateAssetTx(avalanche.getNetworkID(), bintools.cb58Decode(avm.getBlockchainID()), addrs1.map((a) => avm.parseAddress(a)), addrs2.map((a) => avm.parseAddress(a)), initialState, name, symbol, denomination, mintOutputs, avm.getCreationTxFee(), assetID);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
        }));
        test('buildSECPMintTx', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setTxFee(new bn_js_1.default(fee));
            let newMinter = new outputs_1.SECPMintOutput(addrs3.map((a) => avm.parseAddress(a)), new bn_js_1.default(0), 1);
            const txu1 = yield avm.buildSECPMintTx(set, newMinter, secpMintXferOut1, addrs1, addrs2, secpMintUTXO.getUTXOID());
            const txu2 = set.buildSECPMintTx(avalanche.getNetworkID(), bintools.cb58Decode(avm.getBlockchainID()), newMinter, secpMintXferOut1, addrs1.map((a) => avm.parseAddress(a)), addrs2.map((a) => avm.parseAddress(a)), secpMintUTXO.getUTXOID(), avm.getTxFee(), assetID);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "SECPMintTx");
        }));
        test('buildCreateNFTAssetTx', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setCreationTxFee(new bn_js_1.default(constants_2.Defaults.network[12345].P["creationTxFee"]));
            let minterSets = [new minterset_1.MinterSet(1, addrs1)];
            let locktime = new bn_js_1.default(0);
            let txu1 = yield avm.buildCreateNFTAssetTx(set, addrs1, addrs2, minterSets, name, symbol, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow(), locktime);
            let txu2 = set.buildCreateNFTAssetTx(avalanche.getNetworkID(), bintools.cb58Decode(avm.getBlockchainID()), addrs1.map(a => avm.parseAddress(a)), addrs2.map((a) => avm.parseAddress(a)), minterSets, name, symbol, avm.getCreationTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow(), locktime);
            expect(txu2.toBuffer().toString("hex")).toBe(txu1.toBuffer().toString("hex"));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "CreateNFTAssetTx");
        }));
        test('buildCreateNFTMintTx', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setTxFee(new bn_js_1.default(fee));
            let groupID = 0;
            let locktime = new bn_js_1.default(0);
            let threshold = 1;
            let payload = buffer_1.Buffer.from("Avalanche");
            let addrbuff1 = addrs1.map(a => avm.parseAddress(a));
            let addrbuff2 = addrs2.map(a => avm.parseAddress(a));
            let addrbuff3 = addrs3.map(a => avm.parseAddress(a));
            let outputOwners = [];
            let oo = new output_1.OutputOwners(addrbuff3, locktime, threshold);
            outputOwners.push();
            let txu1 = yield avm.buildCreateNFTMintTx(set, oo, addrs1, addrs2, nftutxoids, groupID, payload, undefined, helperfunctions_1.UnixNow());
            let txu2 = set.buildCreateNFTMintTx(avalanche.getNetworkID(), bintools.cb58Decode(avm.getBlockchainID()), [oo], addrbuff1, addrbuff2, nftutxoids, groupID, payload, avm.getTxFee(), assetID, undefined, helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString("hex")).toBe(txu1.toBuffer().toString("hex"));
            expect(txu2.toString()).toBe(txu1.toString());
            outputOwners.push(oo);
            outputOwners.push(new output_1.OutputOwners(addrbuff3, locktime, threshold + 1));
            let txu3 = yield avm.buildCreateNFTMintTx(set, outputOwners, addrs1, addrs2, nftutxoids, groupID, payload, undefined, helperfunctions_1.UnixNow());
            let txu4 = set.buildCreateNFTMintTx(avalanche.getNetworkID(), bintools.cb58Decode(avm.getBlockchainID()), outputOwners, addrbuff1, addrbuff2, nftutxoids, groupID, payload, avm.getTxFee(), assetID, undefined, helperfunctions_1.UnixNow());
            expect(txu4.toBuffer().toString("hex")).toBe(txu3.toBuffer().toString("hex"));
            expect(txu4.toString()).toBe(txu3.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "CreateNFTMintTx");
        }));
        test('buildNFTTransferTx', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setTxFee(new bn_js_1.default(fee));
            const pload = buffer_1.Buffer.alloc(1024);
            pload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, 'utf8');
            const addrbuff1 = addrs1.map((a) => avm.parseAddress(a));
            const addrbuff2 = addrs2.map(a => avm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => avm.parseAddress(a));
            const txu1 = yield avm.buildNFTTransferTx(set, addrs3, addrs1, addrs2, nftutxoids[1], new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow(), new bn_js_1.default(0), 1);
            const txu2 = set.buildNFTTransferTx(networkid, bintools.cb58Decode(blockchainid), addrbuff3, addrbuff1, addrbuff2, [nftutxoids[1]], avm.getTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow(), new bn_js_1.default(0), 1);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "NFTTransferTx");
        }));
        test('buildImportTx', () => __awaiter(void 0, void 0, void 0, function* () {
            let locktime = new bn_js_1.default(0);
            let threshold = 1;
            avm.setTxFee(new bn_js_1.default(fee));
            const addrbuff1 = addrs1.map((a) => avm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => avm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => avm.parseAddress(a));
            const fungutxo = set.getUTXO(fungutxoids[1]);
            const fungutxostr = fungutxo.toString();
            const result = avm.buildImportTx(set, addrs1, constants_3.PlatformChainID, addrs3, addrs1, addrs2, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow(), locktime, threshold);
            const payload = {
                result: {
                    utxos: [fungutxostr]
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            const txu1 = yield result;
            const txu2 = set.buildImportTx(networkid, bintools.cb58Decode(blockchainid), addrbuff3, addrbuff1, addrbuff2, [fungutxo], bintools.cb58Decode(constants_3.PlatformChainID), avm.getTxFee(), yield avm.getAVAXAssetID(), new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow(), locktime, threshold);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "ImportTx");
        }));
        test('buildExportTx', () => __awaiter(void 0, void 0, void 0, function* () {
            avm.setTxFee(new bn_js_1.default(fee));
            const addrbuff1 = addrs1.map((a) => avm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => avm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => avm.parseAddress(a));
            const amount = new bn_js_1.default(90);
            const txu1 = yield avm.buildExportTx(set, amount, bintools.cb58Decode(constants_3.PlatformChainID), addrbuff3.map((a) => bintools.addressToString(avalanche.getHRP(), "P", a)), addrs1, addrs2, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = set.buildExportTx(networkid, bintools.cb58Decode(blockchainid), amount, assetID, addrbuff3, addrbuff1, addrbuff2, bintools.cb58Decode(constants_3.PlatformChainID), avm.getTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            const txu3 = yield avm.buildExportTx(set, amount, constants_3.PlatformChainID, addrs3, addrs1, addrs2, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu4 = set.buildExportTx(networkid, bintools.cb58Decode(blockchainid), amount, assetID, addrbuff3, addrbuff1, addrbuff2, undefined, avm.getTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu4.toBuffer().toString('hex')).toBe(txu3.toBuffer().toString('hex'));
            expect(txu4.toString()).toBe(txu3.toString());
            let tx1 = txu1.sign(avm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(avm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "ExportTx");
        }));
        test('buildGenesis', () => __awaiter(void 0, void 0, void 0, function* () {
            let genesisData = {
                genesisData: {
                    assetAlias1: {
                        name: "human readable name",
                        symbol: "AVAL",
                        initialState: {
                            fixedCap: [
                                {
                                    amount: 1000,
                                    address: "A"
                                },
                                {
                                    amount: 5000,
                                    address: "B"
                                },
                            ]
                        }
                    },
                    assetAliasCanBeAnythingUnique: {
                        name: "human readable name",
                        symbol: "AVAL",
                        initialState: {
                            variableCap: [
                                {
                                    minters: [
                                        "A",
                                        "B"
                                    ],
                                    threshold: 1
                                },
                                {
                                    minters: [
                                        "A",
                                        "B",
                                        "C"
                                    ],
                                    threshold: 2
                                }
                            ]
                        }
                    }
                }
            };
            let bytes = "111TNWzUtHKoSvxohjyfEwE2X228ZDGBngZ4mdMUVMnVnjtnawW1b1zbAhzyAM1v6d7ECNj6DXsT7qDmhSEf3DWgXRj7ECwBX36ZXFc9tWVB2qHURoUfdDvFsBeSRqatCmj76eZQMGZDgBFRNijRhPNKUap7bCeKpHDtuCZc4YpPkd4mR84dLL2AL1b4K46eirWKMaFVjA5btYS4DnyUx5cLpAq3d35kEdNdU5zH3rTU18S4TxYV8voMPcLCTZ3h4zRsM5jW1cUzjWVvKg7uYS2oR9qXRFcgy1gwNTFZGstySuvSF7MZeZF4zSdNgC4rbY9H94RVhqe8rW7MXqMSZB6vBTB2BpgF6tNFehmYxEXwjaKRrimX91utvZe9YjgGbDr8XHsXCnXXg4ZDCjapCy4HmmRUtUoAduGNBdGVMiwE9WvVbpMFFcNfgDXGz9NiatgSnkxQALTHvGXXm8bn4CoLFzKnAtq3KwiWqHmV3GjFYeUm3m8Zee9VDfZAvDsha51acxfto1htstxYu66DWpT36YT18WSbxibZcKXa7gZrrsCwyzid8CCWw79DbaLCUiq9u47VqofG1kgxwuuyHb8NVnTgRTkQASSbj232fyG7YeX4mAvZY7a7K7yfSyzJaXdUdR7aLeCdLP6mbFDqUMrN6YEkU2X8d4Ck3T";
            let result = api.buildGenesis(genesisData);
            let payload = {
                "result": {
                    'bytes': bytes
                }
            };
            let responseObj = {
                data: payload
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            let response = yield result;
            expect(response).toBe(bytes);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,