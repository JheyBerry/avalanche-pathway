"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("src/utils/bintools"));
const credentials_1 = require("src/common/credentials");
const output_1 = require("src/common/output");
const helperfunctions_1 = require("src/utils/helperfunctions");
const bintools = bintools_1.default.getInstance();
describe('UnixNow', () => {
    test('Does it return the right time?', () => {
        const now = Math.round((new Date()).getTime() / 1000);
        const unow = helperfunctions_1.UnixNow();
        expect(now / 10).toBeCloseTo(unow.divn(10).toNumber(), -1);
    });
});
describe('Signature & NBytes', () => {
    const sig = new credentials_1.Signature();
    const sigpop = [];
    for (let i = 0; i < sig.getSize(); i++) {
        sigpop[i] = i;
    }
    const sigbuff = buffer_1.Buffer.from(sigpop);
    const size = sig.fromBuffer(sigbuff);
    expect(sig.getSize()).toBe(size);
    expect(size).toBe(sig.getSize());
    const sigbuff2 = sig.toBuffer();
    for (let i = 0; i < sigbuff.length; i++) {
        expect(sigbuff2[i]).toBe(sigbuff[i]);
    }
    const sigbuffstr = bintools.bufferToB58(sigbuff);
    expect(sig.toString()).toBe(sigbuffstr);
    sig.fromString(sigbuffstr);
    expect(sig.toString()).toBe(sigbuffstr);
});
describe('SigIdx', () => {
    const sigidx = new credentials_1.SigIdx();
    expect(sigidx.getSize()).toBe(sigidx.toBuffer().length);
    sigidx.setSource(buffer_1.Buffer.from('abcd', 'hex'));
    expect(sigidx.getSource().toString('hex')).toBe('abcd');
});
describe('Address', () => {
    const addr1 = new output_1.Address();
    const addr2 = new output_1.Address();
    const smaller = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
    const bigger = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1];
    const addr1bytes = buffer_1.Buffer.from(smaller);
    const addr2bytes = buffer_1.Buffer.from(bigger);
    addr1.fromBuffer(addr1bytes);
    addr2.fromBuffer(addr2bytes);
    expect(output_1.Address.comparator()(addr1, addr2)).toBe(-1);
    expect(output_1.Address.comparator()(addr2, addr1)).toBe(1);
    const addr2str = addr2.toString();
    addr2.fromBuffer(addr1bytes);
    expect(output_1.Address.comparator()(addr1, addr2)).toBe(0);
    addr2.fromString(addr2str);
    expect(output_1.Address.comparator()(addr1, addr2)).toBe(-1);
    const a1b = addr1.toBuffer();
    const a1s = bintools.bufferToB58(a1b);
    addr2.fromString(a1s);
    expect(output_1.Address.comparator()(addr1, addr2)).toBe(0);
    const badbuff = bintools.copyFrom(addr1bytes);
    let badbuffout = buffer_1.Buffer.concat([badbuff, buffer_1.Buffer.from([1, 2])]);
    let badstr = bintools.bufferToB58(badbuffout);
    const badaddr = new output_1.Address();
    expect(() => {
        badaddr.fromString(badstr);
    }).toThrow('Error - Address.fromString: invalid address');
    badbuffout = buffer_1.Buffer.concat([badbuff, buffer_1.Buffer.from([1, 2, 3, 4])]);
    badstr = bintools.bufferToB58(badbuffout);
    expect(() => {
        badaddr.fromString(badstr);
    }).toThrow('Error - Address.fromString: invalid checksum on address');
});
//# sourceMappingURL=data:application/json;base64,