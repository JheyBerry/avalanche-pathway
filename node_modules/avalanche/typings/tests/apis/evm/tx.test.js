"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const utxos_1 = require("src/apis/evm/utxos");
const api_1 = require("src/apis/evm/api");
const keychain_1 = require("src/apis/evm/keychain");
const inputs_1 = require("src/apis/evm/inputs");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("src/apis/avm/outputs");
const constants_1 = require("src/apis/avm/constants");
const ops_1 = require("src/apis/avm/ops");
const index_1 = require("src/index");
const importtx_1 = require("src/apis/evm/importtx");
const constants_2 = require("src/utils/constants");
const constants_3 = require("src/utils/constants");
const constants_4 = require("../../../src/utils/constants");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe("Transactions", () => {
    let set;
    let keymgr1;
    let keymgr2;
    let keymgr3;
    let addrs1;
    let addrs2;
    let addrs3;
    let utxos;
    let inputs;
    let outputs;
    let ops;
    let importIns;
    let importUTXOs;
    let exportOuts;
    let fungutxos;
    let exportUTXOIDS;
    let api;
    const amnt = 10000;
    const networkID = 12345;
    const memo = bintools.stringToBuffer("AvalancheJS");
    const blockchainid = constants_3.Defaults.network[networkID].C.blockchainID;
    const alias = "X";
    const assetID = buffer_1.Buffer.from(create_hash_1.default("sha256").update("Well, now, don't you tell me to smile, you stick around I'll make it worth your while.").digest());
    const NFTassetID = buffer_1.Buffer.from(create_hash_1.default("sha256").update("I can't stand it, I know you planned it, I'mma set straight this Watergate.'").digest());
    let amount;
    let addresses;
    let fallAddresses;
    let locktime;
    let fallLocktime;
    let threshold;
    let fallThreshold;
    const nftutxoids = [];
    const ip = "127.0.0.1";
    const port = 8080;
    const protocol = "http";
    let avalanche;
    const blockchainID = bintools.cb58Decode(blockchainid);
    const name = "Mortycoin is the dumb as a sack of hammers.";
    const symbol = "morT";
    const denomination = 8;
    let avaxAssetID;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        avalanche = new index_1.Avalanche(ip, port, protocol, networkID, undefined, undefined, null, true);
        api = new api_1.EVMAPI(avalanche, "/ext/bc/avm", blockchainid);
        const result = api.getAVAXAssetID();
        const payload = {
            result: {
                name,
                symbol,
                assetID: bintools.cb58Encode(assetID),
                denomination: `${denomination}`,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        avaxAssetID = yield result;
    }));
    beforeEach(() => {
        set = new utxos_1.UTXOSet();
        keymgr1 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
        keymgr2 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
        keymgr3 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
        addrs1 = [];
        addrs2 = [];
        addrs3 = [];
        utxos = [];
        inputs = [];
        outputs = [];
        importIns = [];
        importUTXOs = [];
        exportOuts = [];
        fungutxos = [];
        exportUTXOIDS = [];
        ops = [];
        for (let i = 0; i < 3; i++) {
            addrs1.push(keymgr1.makeKey().getAddress());
            addrs2.push(keymgr2.makeKey().getAddress());
            addrs3.push(keymgr3.makeKey().getAddress());
        }
        amount = constants_4.ONEAVAX.mul(new bn_js_1.default(amnt));
        addresses = keymgr1.getAddresses();
        fallAddresses = keymgr2.getAddresses();
        locktime = new bn_js_1.default(54321);
        fallLocktime = locktime.add(new bn_js_1.default(50));
        threshold = 3;
        fallThreshold = 1;
        const payload = buffer_1.Buffer.alloc(1024);
        payload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, "utf8");
        for (let i = 0; i < 5; i++) {
            let txid = buffer_1.Buffer.from(create_hash_1.default("sha256").update(bintools.fromBNToBuffer(new bn_js_1.default(i), 32)).digest());
            let txidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(new bn_js_1.default(i), 4));
            const out = new outputs_1.SECPTransferOutput(amount, addresses, locktime, threshold);
            const xferout = new outputs_1.TransferableOutput(assetID, out);
            outputs.push(xferout);
            const u = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, txid, txidx, assetID, out);
            utxos.push(u);
            fungutxos.push(u);
            importUTXOs.push(u);
            txid = u.getTxID();
            txidx = u.getOutputIdx();
            const input = new inputs_1.SECPTransferInput(amount);
            const xferin = new inputs_1.TransferableInput(txid, txidx, assetID, input);
            inputs.push(xferin);
            const nout = new outputs_1.NFTTransferOutput(1000 + i, payload, addresses, locktime, threshold);
            const op = new ops_1.NFTTransferOperation(nout);
            const nfttxid = buffer_1.Buffer.from(create_hash_1.default("sha256").update(bintools.fromBNToBuffer(new bn_js_1.default(1000 + i), 32)).digest());
            const nftutxo = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, nfttxid, 1000 + i, NFTassetID, nout);
            nftutxoids.push(nftutxo.getUTXOID());
            const xferop = new ops_1.TransferableOperation(NFTassetID, [nftutxo.getUTXOID()], op);
            ops.push(xferop);
            utxos.push(nftutxo);
        }
        for (let i = 1; i < 4; i++) {
            importIns.push(inputs[i]);
            exportOuts.push(outputs[i]);
            exportUTXOIDS.push(fungutxos[i].getUTXOID());
        }
        set.addArray(utxos);
    });
    test("Creation ImportTx", () => {
        const ip = "localhost";
        const port = 9650;
        const protocol = "http";
        const networkID = 12345;
        const avalanche = new index_1.Avalanche(ip, port, protocol, networkID);
        const cchain = avalanche.CChain();
        const bintools = bintools_1.default.getInstance();
        const cKeychain = cchain.keyChain();
        const privKey = `${constants_2.PrivateKeyPrefix}${constants_2.DefaultLocalGenesisPrivateKey}`;
        cKeychain.importKey(privKey);
        const cChainBlockchainIdStr = constants_3.Defaults.network["12345"].C.blockchainID;
        const cChainBlockchainIdBuf = bintools.cb58Decode(cChainBlockchainIdStr);
        const xChainBlockchainIdStr = constants_3.Defaults.network["12345"].X.blockchainID;
        const xChainBlockchainIdBuf = bintools.cb58Decode(xChainBlockchainIdStr);
        const importedIns = [];
        const evmOutputs = [];
        const importTx = new importtx_1.ImportTx(networkID, cChainBlockchainIdBuf, xChainBlockchainIdBuf, importedIns, evmOutputs);
        const importTxBuff = importTx.toBuffer();
        const importTxNew = new importtx_1.ImportTx();
        importTxNew.fromBuffer(importTxBuff);
        const importbuff = importTx.toBuffer();
        importTxNew.fromBuffer(importbuff);
        console.log();
        expect(importTxNew.toBuffer().toString("hex")).toBe(importbuff.toString("hex"));
        expect(importTxNew.toString()).toBe(importTx.toString());
        expect(importTx.getImportInputs().length).toBe(importIns.length);
    });
    //   test('Creation ExportTx', () => {
    //     cnst bombtx: ExportTx = new ExportTx(
    //       netid, blockchainID, outputs, inputs, undefined, undefined, exportOuts
    //     );
    //     expect(() => {
    //       bombtx.toBuffer();
    //     }).toThrow();
    //     const exporttx: ExportTx = new ExportTx(
    //       netid, blockchainID, outputs, inputs, undefined, bintools.cb58Decode(PlatformChainID), exportOuts
    //     );
    //     const txunew: ExportTx = new ExportTx();
    //     const exportbuff: Buffer = exporttx.toBuffer();
    //     txunew.fromBuffer(exportbuff);
    //     expect(txunew.toBuffer().toString('hex')).toBe(exportbuff.toString('hex'));
    //     expect(txunew.toString()).toBe(exporttx.toString());
    //     expect(exporttx.getExportOutputs().length).toBe(exportOuts.length);
    //   });
    //   test('Creation Tx4 using ImportTx', () => {
    //     const txu:UnsignedTx = set.buildImportTx(
    //       netid, blockchainID, addrs3, addrs1, addrs2, importUTXOs, bintools.cb58Decode(PlatformChainID), new BN(90), assetID,
    //       new UTF8Payload("hello world").getPayload(), UnixNow());
    //     const tx:Tx = txu.sign(keymgr1);
    //     const tx2:Tx = new Tx();
    //     tx2.fromBuffer(tx.toBuffer());
    //     expect(tx2.toBuffer().toString('hex')).toBe(tx.toBuffer().toString('hex'));
    //   });
    //   test('Creation Tx5 using ExportTx', () => {
    //     const txu:UnsignedTx = set.buildExportTx(
    //       netid, blockchainID, new BN(90), avaxAssetID,
    //       addrs3, addrs1, addrs2, bintools.cb58Decode(PlatformChainID), 
    //       undefined, undefined, new UTF8Payload("hello world").getPayload(), UnixNow()
    //     )
    //     const tx:Tx = txu.sign(keymgr1);
    //     const tx2:Tx = new Tx();
    //     tx2.fromBuffer(tx.toBuffer());
    //     expect(tx.toBuffer().toString('hex')).toBe(tx2.toBuffer().toString('hex'));
    //   });
});
//# sourceMappingURL=data:application/json;base64,