"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utxos_1 = require("src/apis/platformvm/utxos");
const keychain_1 = require("src/apis/platformvm/keychain");
const inputs_1 = require("src/apis/platformvm/inputs");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("src/apis/platformvm/outputs");
const constants_1 = require("src/apis/platformvm/constants");
const input_1 = require("src/common/input");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe('Inputs', () => {
    let set;
    let keymgr1;
    let keymgr2;
    let addrs1;
    let addrs2;
    let utxos;
    let hrp = "tests";
    const amnt = 10000;
    beforeEach(() => {
        set = new utxos_1.UTXOSet();
        keymgr1 = new keychain_1.KeyChain(hrp, 'X');
        keymgr2 = new keychain_1.KeyChain(hrp, 'X');
        addrs1 = [];
        addrs2 = [];
        utxos = [];
        for (let i = 0; i < 3; i++) {
            addrs1.push(keymgr1.makeKey().getAddress());
            addrs2.push(keymgr2.makeKey().getAddress());
        }
        const amount = new bn_js_1.default(amnt);
        const addresses = keymgr1.getAddresses();
        const locktime = new bn_js_1.default(54321);
        const threshold = 3;
        for (let i = 0; i < 3; i++) {
            const txid = buffer_1.Buffer.from(create_hash_1.default('sha256').update(bintools.fromBNToBuffer(new bn_js_1.default(i), 32)).digest());
            const txidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(new bn_js_1.default(i), 4));
            const assetID = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txid).digest());
            const out = new outputs_1.SECPTransferOutput(amount.add(new bn_js_1.default(i)), addresses, locktime, threshold);
            const xferout = new outputs_1.TransferableOutput(assetID, out);
            const u = new utxos_1.UTXO(constants_1.PlatformVMConstants.LATESTCODEC, txid, txidx, assetID, out);
            u.fromBuffer(buffer_1.Buffer.concat([u.getCodecIDBuffer(), txid, txidx, xferout.toBuffer()]));
            utxos.push(u);
        }
        set.addArray(utxos);
    });
    test('SECPInput', () => {
        let u;
        let txid;
        let txidx;
        const amount = new bn_js_1.default(amnt);
        let input;
        let xferinput;
        u = utxos[0];
        txid = u.getTxID();
        txidx = u.getOutputIdx();
        const asset = u.getAssetID();
        input = new inputs_1.SECPTransferInput(amount);
        xferinput = new inputs_1.TransferableInput(txid, txidx, asset, input);
        expect(xferinput.getUTXOID()).toBe(u.getUTXOID());
        expect(input.getInputID()).toBe(constants_1.PlatformVMConstants.SECPINPUTID);
        input.addSignatureIdx(0, addrs2[0]);
        input.addSignatureIdx(1, addrs2[1]);
        const newin = new inputs_1.SECPTransferInput();
        newin.fromBuffer(bintools.b58ToBuffer(input.toString()));
        expect(newin.toBuffer().toString('hex')).toBe(input.toBuffer().toString('hex'));
        expect(newin.getSigIdxs().toString()).toBe(input.getSigIdxs().toString());
    });
    test('Input comparator', () => {
        const inpt1 = new inputs_1.SECPTransferInput(utxos[0].getOutput().getAmount());
        const inpt2 = new inputs_1.SECPTransferInput(utxos[1].getOutput().getAmount());
        const inpt3 = new inputs_1.SECPTransferInput(utxos[2].getOutput().getAmount());
        const cmp = input_1.Input.comparator();
        expect(cmp(inpt1, inpt2)).toBe(-1);
        expect(cmp(inpt1, inpt3)).toBe(-1);
        expect(cmp(inpt1, inpt1)).toBe(0);
        expect(cmp(inpt2, inpt2)).toBe(0);
        expect(cmp(inpt3, inpt3)).toBe(0);
    });
    test('TransferableInput comparator', () => {
        const inpt1 = new inputs_1.SECPTransferInput(utxos[0].getOutput().getAmount());
        const in1 = new inputs_1.TransferableInput(utxos[0].getTxID(), utxos[0].getOutputIdx(), utxos[0].getAssetID(), inpt1);
        const inpt2 = new inputs_1.SECPTransferInput(utxos[1].getOutput().getAmount());
        const in2 = new inputs_1.TransferableInput(utxos[1].getTxID(), utxos[1].getOutputIdx(), utxos[1].getAssetID(), inpt2);
        const inpt3 = new inputs_1.SECPTransferInput(utxos[2].getOutput().getAmount());
        const in3 = new inputs_1.TransferableInput(utxos[2].getTxID(), utxos[2].getOutputIdx(), utxos[2].getAssetID(), inpt3);
        const cmp = inputs_1.TransferableInput.comparator();
        expect(cmp(in1, in2)).toBe(-1);
        expect(cmp(in1, in3)).toBe(-1);
        expect(cmp(in1, in1)).toBe(0);
        expect(cmp(in2, in2)).toBe(0);
        expect(cmp(in3, in3)).toBe(0);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0cy9hcGlzL3BsYXRmb3Jtdm0vaW5wdXRzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBMEQ7QUFDMUQsMkRBQXdEO0FBQ3hELHVEQUFrRjtBQUNsRiw4REFBcUM7QUFDckMsa0VBQTBDO0FBQzFDLGtEQUF1QjtBQUN2QixvQ0FBaUM7QUFDakMseURBRXFDO0FBQ3JDLDZEQUFvRTtBQUNwRSw0Q0FBeUM7QUFHekM7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3hDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0lBQ3RCLElBQUksR0FBVyxDQUFDO0lBQ2hCLElBQUksT0FBZ0IsQ0FBQztJQUNyQixJQUFJLE9BQWdCLENBQUM7SUFDckIsSUFBSSxNQUFvQixDQUFDO0lBQ3pCLElBQUksTUFBb0IsQ0FBQztJQUN6QixJQUFJLEtBQWlCLENBQUM7SUFDdEIsSUFBSSxHQUFHLEdBQVUsT0FBTyxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUFVLEtBQUssQ0FBQztJQUMxQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsR0FBRyxHQUFHLElBQUksZUFBTyxFQUFFLENBQUM7UUFDcEIsT0FBTyxHQUFHLElBQUksbUJBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakMsT0FBTyxHQUFHLElBQUksbUJBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNaLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsS0FBSyxJQUFJLENBQUMsR0FBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxNQUFNLENBQUMsSUFB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QUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVUWE9TZXQsIFVUWE8gfSBmcm9tICdzcmMvYXBpcy9wbGF0Zm9ybXZtL3V0eG9zJztcbmltcG9ydCB7IEtleUNoYWluIH0gZnJvbSAnc3JjL2FwaXMvcGxhdGZvcm12bS9rZXljaGFpbic7XG5pbXBvcnQgeyBTRUNQVHJhbnNmZXJJbnB1dCwgVHJhbnNmZXJhYmxlSW5wdXQgfSBmcm9tICdzcmMvYXBpcy9wbGF0Zm9ybXZtL2lucHV0cyc7XG5pbXBvcnQgY3JlYXRlSGFzaCBmcm9tICdjcmVhdGUtaGFzaCc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnc3JjL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCB7XG4gIFNFQ1BUcmFuc2Zlck91dHB1dCwgQW1vdW50T3V0cHV0LCBUcmFuc2ZlcmFibGVPdXRwdXQsXG59IGZyb20gJ3NyYy9hcGlzL3BsYXRmb3Jtdm0vb3V0cHV0cyc7XG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMnO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdzcmMvY29tbW9uL2lucHV0JztcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gJ3NyYy9jb21tb24vb3V0cHV0JztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcbmRlc2NyaWJlKCdJbnB1dHMnLCAoKSA9PiB7XG4gIGxldCBzZXQ6VVRYT1NldDtcbiAgbGV0IGtleW1ncjE6S2V5Q2hhaW47XG4gIGxldCBrZXltZ3IyOktleUNoYWluO1xuICBsZXQgYWRkcnMxOkFycmF5PEJ1ZmZlcj47XG4gIGxldCBhZGRyczI6QXJyYXk8QnVmZmVyPjtcbiAgbGV0IHV0eG9zOkFycmF5PFVUWE8+O1xuICBsZXQgaHJwOnN0cmluZyA9IFwidGVzdHNcIjtcbiAgY29uc3QgYW1udDpudW1iZXIgPSAxMDAwMDtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc2V0ID0gbmV3IFVUWE9TZXQoKTtcbiAgICBrZXltZ3IxID0gbmV3IEtleUNoYWluKGhycCwgJ1gnKTtcbiAgICBrZXltZ3IyID0gbmV3IEtleUNoYWluKGhycCwgJ1gnKTtcbiAgICBhZGRyczEgPSBbXTtcbiAgICBhZGRyczIgPSBbXTtcbiAgICB1dHhvcyA9IFtdO1xuICAgIGZvciAobGV0IGk6bnVtYmVyID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgYWRkcnMxLnB1c2goa2V5bWdyMS5tYWtlS2V5KCkuZ2V0QWRkcmVzcygpKTtcbiAgICAgIGFkZHJzMi5wdXNoKGtleW1ncjIubWFrZUtleSgpLmdldEFkZHJlc3MoKSk7XG4gICAgfVxuICAgIGNvbnN0IGFtb3VudDpCTiA9IG5ldyBCTihhbW50KTtcbiAgICBjb25zdCBhZGRyZXNzZXM6QXJyYXk8QnVmZmVyPiA9IGtleW1ncjEuZ2V0QWRkcmVzc2VzKCk7XG4gICAgY29uc3QgbG9ja3RpbWU6Qk4gPSBuZXcgQk4oNTQzMjEpO1xuICAgIGNvbnN0IHRocmVzaG9sZDpudW1iZXIgPSAzO1xuXG4gICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICBjb25zdCB0eGlkOkJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShiaW50b29scy5mcm9tQk5Ub0J1ZmZlcihuZXcgQk4oaSksIDMyKSkuZGlnZXN0KCkpO1xuICAgICAgY29uc3QgdHhpZHg6QnVmZmVyID0gQnVmZmVyLmZyb20oYmludG9vbHMuZnJvbUJOVG9CdWZmZXIobmV3IEJOKGkpLCA0KSk7XG4gICAgICBjb25zdCBhc3NldElEOkJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZSh0eGlkKS5kaWdlc3QoKSk7XG4gICAgICBjb25zdCBvdXQ6T3V0cHV0ID0gbmV3IFNFQ1BUcmFuc2Zlck91dHB1dChhbW91bnQuYWRkKG5ldyBCTihpKSksIGFkZHJlc3NlcywgbG9ja3RpbWUsIHRocmVzaG9sZCk7XG4gICAgICBjb25zdCB4ZmVyb3V0OlRyYW5zZmVyYWJsZU91dHB1dCA9IG5ldyBUcmFuc2ZlcmFibGVPdXRwdXQoYXNzZXRJRCwgb3V0KTtcbiAgICAgIGNvbnN0IHU6VVRYTyA9IG5ldyBVVFhPKFBsYXRmb3JtVk1Db25zdGFudHMuTEFURVNUQ09ERUMsIHR4aWQsIHR4aWR4LCBhc3NldElELCBvdXQpO1xuICAgICAgdS5mcm9tQnVmZmVyKEJ1ZmZlci5jb25jYXQoW3UuZ2V0Q29kZWNJREJ1ZmZlcigpLCB0eGlkLCB0eGlkeCwgeGZlcm91dC50b0J1ZmZlcigpXSkpO1xuICAgICAgdXR4b3MucHVzaCh1KTtcbiAgICB9XG4gICAgc2V0LmFkZEFycmF5KHV0eG9zKTtcbiAgfSk7XG4gIHRlc3QoJ1NFQ1BJbnB1dCcsICgpID0+IHtcbiAgICBsZXQgdTpVVFhPO1xuICAgIGxldCB0eGlkOkJ1ZmZlcjtcbiAgICBsZXQgdHhpZHg6QnVmZmVyO1xuICAgIGNvbnN0IGFtb3VudDpCTiA9IG5ldyBCTihhbW50KTtcbiAgICBsZXQgaW5wdXQ6U0VDUFRyYW5zZmVySW5wdXQ7XG4gICAgbGV0IHhmZXJpbnB1dDpUcmFuc2ZlcmFibGVJbnB1dDtcblxuICAgIHUgPSB1dHhvc1swXTtcbiAgICB0eGlkID0gdS5nZXRUeElEKCk7XG4gICAgdHhpZHggPSB1LmdldE91dHB1dElkeCgpO1xuICAgIGNvbnN0IGFzc2V0ID0gdS5nZXRBc3NldElEKCk7XG5cbiAgICBpbnB1dCA9IG5ldyBTRUNQVHJhbnNmZXJJbnB1dChhbW91bnQpO1xuICAgIHhmZXJpbnB1dCA9IG5ldyBUcmFuc2ZlcmFibGVJbnB1dCh0eGlkLCB0eGlkeCwgYXNzZXQsIGlucHV0KTtcbiAgICBleHBlY3QoeGZlcmlucHV0LmdldFVUWE9JRCgpKS50b0JlKHUuZ2V0VVRYT0lEKCkpO1xuICAgIGV4cGVjdChpbnB1dC5nZXRJbnB1dElEKCkpLnRvQmUoUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQSU5QVVRJRCk7XG5cbiAgICBpbnB1dC5hZGRTaWduYXR1cmVJZHgoMCwgYWRkcnMyWzBdKTtcbiAgICBpbnB1dC5hZGRTaWduYXR1cmVJZHgoMSwgYWRkcnMyWzFdKTtcblxuICAgIGNvbnN0IG5ld2luOlNFQ1BUcmFuc2ZlcklucHV0ID0gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KCk7XG4gICAgbmV3aW4uZnJvbUJ1ZmZlcihiaW50b29scy5iNThUb0J1ZmZlcihpbnB1dC50b1N0cmluZygpKSk7XG4gICAgZXhwZWN0KG5ld2luLnRvQnVmZmVyKCkudG9TdHJpbmcoJ2hleCcpKS50b0JlKGlucHV0LnRvQnVmZmVyKCkudG9TdHJpbmcoJ2hleCcpKTtcbiAgICBleHBlY3QobmV3aW4uZ2V0U2lnSWR4cygpLnRvU3RyaW5nKCkpLnRvQmUoaW5wdXQuZ2V0U2lnSWR4cygpLnRvU3RyaW5nKCkpO1xuICB9KTtcblxuICB0ZXN0KCdJbnB1dCBjb21wYXJhdG9yJywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHQxOlNFQ1BUcmFuc2ZlcklucHV0ID0gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KCh1dHhvc1swXS5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQpLmdldEFtb3VudCgpKTtcblxuICAgIGNvbnN0IGlucHQyOlNFQ1BUcmFuc2ZlcklucHV0ID0gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KCh1dHhvc1sxXS5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQpLmdldEFtb3VudCgpKTtcblxuICAgIGNvbnN0IGlucHQzOlNFQ1BUcmFuc2ZlcklucHV0ID0gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KCh1dHhvc1syXS5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQpLmdldEFtb3VudCgpKTtcblxuICAgIGNvbnN0IGNtcCA9IElucHV0LmNvbXBhcmF0b3IoKTtcbiAgICBleHBlY3QoY21wKGlucHQxLCBpbnB0MikpLnRvQmUoLTEpO1xuICAgIGV4cGVjdChjbXAoaW5wdDEsIGlucHQzKSkudG9CZSgtMSk7XG4gICAgZXhwZWN0KGNtcChpbnB0MSwgaW5wdDEpKS50b0JlKDApO1xuICAgIGV4cGVjdChjbXAoaW5wdDIsIGlucHQyKSkudG9CZSgwKTtcbiAgICBleHBlY3QoY21wKGlucHQzLCBpbnB0MykpLnRvQmUoMCk7XG4gIH0pO1xuXG4gIHRlc3QoJ1RyYW5zZmVyYWJsZUlucHV0IGNvbXBhcmF0b3InLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdDE6U0VDUFRyYW5zZmVySW5wdXQgPSBuZXcgU0VDUFRyYW5zZmVySW5wdXQoKHV0eG9zWzBdLmdldE91dHB1dCgpIGFzIEFtb3VudE91dHB1dCkuZ2V0QW1vdW50KCkpO1xuICAgIGNvbnN0IGluMTpUcmFuc2ZlcmFibGVJbnB1dCA9IG5ldyBUcmFuc2ZlcmFibGVJbnB1dCh1dHhvc1swXS5nZXRUeElEKCksIHV0eG9zWzBdLmdldE91dHB1dElkeCgpLCB1dHhvc1swXS5nZXRBc3NldElEKCksIGlucHQxKTtcblxuICAgIGNvbnN0IGlucHQyOlNFQ1BUcmFuc2ZlcklucHV0ID0gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KCh1dHhvc1sxXS5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQpLmdldEFtb3VudCgpKTtcbiAgICBjb25zdCBpbjI6VHJhbnNmZXJhYmxlSW5wdXQgPSBuZXcgVHJhbnNmZXJhYmxlSW5wdXQodXR4b3NbMV0uZ2V0VHhJRCgpLCB1dHhvc1sxXS5nZXRPdXRwdXRJZHgoKSwgdXR4b3NbMV0uZ2V0QXNzZXRJRCgpLCBpbnB0Mik7XG5cbiAgICBjb25zdCBpbnB0MzpTRUNQVHJhbnNmZXJJbnB1dCA9IG5ldyBTRUNQVHJhbnNmZXJJbnB1dCgodXR4b3NbMl0uZ2V0T3V0cHV0KCkgYXMgQW1vdW50T3V0cHV0KS5nZXRBbW91bnQoKSk7XG4gICAgY29uc3QgaW4zOlRyYW5zZmVyYWJsZUlucHV0ID0gbmV3IFRyYW5zZmVyYWJsZUlucHV0KHV0eG9zWzJdLmdldFR4SUQoKSwgdXR4b3NbMl0uZ2V0T3V0cHV0SWR4KCksIHV0eG9zWzJdLmdldEFzc2V0SUQoKSwgaW5wdDMpO1xuXG4gICAgY29uc3QgY21wID0gVHJhbnNmZXJhYmxlSW5wdXQuY29tcGFyYXRvcigpO1xuICAgIGV4cGVjdChjbXAoaW4xLCBpbjIpKS50b0JlKC0xKTtcbiAgICBleHBlY3QoY21wKGluMSwgaW4zKSkudG9CZSgtMSk7XG4gICAgZXhwZWN0KGNtcChpbjEsIGluMSkpLnRvQmUoMCk7XG4gICAgZXhwZWN0KGNtcChpbjIsIGluMikpLnRvQmUoMCk7XG4gICAgZXhwZWN0KGNtcChpbjMsIGluMykpLnRvQmUoMCk7XG4gIH0pO1xufSk7XG4iXX0=